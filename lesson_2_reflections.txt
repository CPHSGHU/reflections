What happens when you initialize a repository? Why do you need to do it?

Git starts tracking changes of the files in the directory by setting up the metadata folder. It's important to do it to be able to create commits.

How is the staging area different from the working directory and the repository? What value do you think it offers?

Staging area serves as the marker for which files in the working directory should be tracked in the repository. It provides control over theGit version tracking by being indifferent to changes in irrelevant files.

How can you use the staging area to make sure you have one commit per logical change?

Since commits only apply on the files in the staging area, it's possible to commit logical changes separately instead of commiting a collection of files with half-finsihed content.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Branches help in creating multiple program version either for experimentation, logical need (e.g. main settings like language) or separating functional areas of the program for easier progress tracking before merging them back together.

How do the diagrams help you visualize the branch structure?

Easier to understand reachability and parent-child structures. Also keeps track of branch commit ids which might be unreachable from the current head.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

Merging goes back to the split point of the two branches, then trying to figure out which changes to keep in the merged version. This is called merge strategy. At the end, commits of both branches arepreserved and reachable in the history.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

Automatic merging is making it easy to merge functionally and logically different sections of the code. It also makes merging easy, when some parts of the code were only modified in one of the versions.